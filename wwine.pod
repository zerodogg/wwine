# Yes this is a pod file living in a Ruby project.
#
# POD is a very nice format to write documentation in, and RDoc does
# not appear to be able to properly export to manpages, hence why I
# decided to use POD. The manpage that also lives in the git repo
# is the one that is distributed. The POD only lives in the git repo
# and is used to generate the manpage.

=head1 NAME

wwine - a simple wine(1) wrapper

=head1 SYNOPSIS

wwine I<(WWINE PARAMETERS)> I<PROGRAM> -- I<[PROGRAM ARGUMENTS]>

=head1 DESCRIPTION

B<wwine> is a a wine(1) wrapper. It wraps various flavours of wine
(including vanilla wine and crossover office/games) into a single
unified interface, complete with full bottle support for all
of them (including vanilla wine).

It integrates well with all flavours, so for instance applications
installed using crossover will be manageable through the usual crossover
interface.

For vanilla wine it uses WINEPREFIX to achieve bottle support,
creating bottles as ~/.wwinebottles/[BOTTLE_NAME].

When no --wine is explicitly supplied, wwine will use wine, or if that is
not available, attempt to autodetect which flavour to use. See the information
for --wine for more information.

=head1 OPTIONS

=over

=item B<-h, --help>

Display the help screen

=item B<-w, --wine> I<FLAVOUR>

Use the supplied flavour of wine. The default is to use vanilla wine.

Possible parameters: wine, cxgames, cxoffice, cedega, cxg (alias for cxgames),
cxo (alias for cxoffice) or /path/to/a/wine.binary

If this parameter is not supplied, wwine will attempt to autodetect which
wine to use, checking for the existance of flavours in the following order,
using the first one found: wine, cxgames, cxoffice, cedega. To see the
default flavour wwine will use, run I<wwine --debuginfo>.

See also I<--cxinstalldir>.

=item B<-b, --bottle> I<NAME>

Use the bottle with the name supplied. For cxgames, cxoffice or cedega
it uses the flavours builtin bottle support. For vanilla wine it sets
WINEPREFIX to use ~/.wwinebottles/<NAME>. It defaults to no bottle,
in which case vanilla wine will use ~/.wine, cxoffice/cxgames will
use the bottle defined as default and for cedega a bottle named 'wwineFolder'
will be used.

=item B<-k, --kill>

Attempt to kill all running wine processes. See also I<--drykill>

The default signal is SIGTERM, however you can supply any signal number
you want (ie. "wwine -k9").

=item B<--drykill>

Print what I<--kill> would have done, without actually doing anything.

=item B<--env>

B<--env> causes wwine to set the WINE and WINEPREFIX environment
variables, and (optionally) run a native program with those variables
set. This lets you run any program that uses the WINE and WINEPREFIX
variables with wwine instead of wine (effectively giving you bottle
support, as well as support for using cxgames/cxoffice/.. instead
of wine).

When you use --env, wwine will obey --bottle and --wine (or --from) and set
WINE and WINEPREFIX accordingly. If you supply additional parameters, then
wwine will run that command, otherwise it will output the variables that would
have been set.

See the EXAMPLES section for an example of how to use winetricks
with cxgames using wwine's B<--env>

=item B<--tricks>

Run winetricks with the wine/bottle combination supplied. This is I<almost>
equivalent to I<--env winetricks -- --no-isolate> (the I<--> would be required
if you used --env, and would stop processing the rest of the I<wwine> command-line,
--tricks does not add the --, so it can be supplied anywhere on the command-line)
I<--tricks> can be used to quickly call winetricks in a bottle. Examples:

=over

=item Install package (ie. corefonts)

I<--tricks corefonts>

=item Get winetricks help

I<--tricks -- --help>

=back

=item B<--env-bottle>

This option is primarily for internal use. It causes wwine to parse which
--bottle to use from the WINEPREFIX variable.

=item B<-c, --cxinstalldir> I<PATH>

Use the supplied path as the path to either a crossover office/games install
directory, or as a directory that contains a cxoffice and/or cxgames directory.

=item B<--wrap> I<PATH>

Generate a wrapper script of the current command-line and write it to
I<PATH>. Simply write a wwine command as usual, and append --wrap I<PATH>
to it, and wwine will generate a wrapper script that you can use to
run that command with at any later time so you don't have to remember
or retype it every time.

Generally I<PATH> should be somewhere in your $PATH (ie. ~/bin/somecommand)
so that you can start the command from anywhere.

By default the wrapper script will change directory to the directory
you were in when you created it, but you can use B<--wrapdir> to explicitly
supply one.

The wrapper script also contains some basic code that ensures that
even if you remove or move wwine, the wrapper script will keep working.

=item B<--wrapdir> I<PATH>

Change directory to I<PATH> in the wrapper script generated by I<--wrap>.
If this is not supplied wwine will change to the directory that you
were in at the time the wrapper script was created.

=item B<-s, --from> I<PATH>

Load parameters from the wwine wrapper script (as created by I<--wrap>)
located at I<PATH>. wwine will act as though the wrapper script had been
run, with one important difference, any additional command-line arguments
supplied to wwine will override settings from the wrapper script.

This can be useful if you have a wrapper script set up to use cxgames,
but want to give a one off attempt at using wine. In such a case you could
do "wwine -s /path/to/wrapperscript -w wine".

This option is verbose, it will tell you each argument that is being
applied.

=item B<-v, --verbose>

Increase verbosity. When this is present wwine will tell you the exact
commands it is running.

=item B<--man>

Show the manpage. Normally 'man wwine' would do, but when wwine is
installed from a rubygem the wwine manpage isn't placed anywhere
in man(1)'s path, this will autodetect its location and issue man
directly on the wwine.1 file (and thus work even when 'man wwine'
does not).

=item B<--debuginfo>

Output information that is useful in bug reports, or when requesting support.

=back

=head1 EXAMPLES

=over

=item I<wwine file.exe>

The same as 'WINEDEBUG=-all wine file.exe'

=item I<wwine -b file file.exe>

Runs file.exe in wine, using the 'file' bottle.

=item I<wwine -w cxg -b file file.exe>

Runs file.exe in crossover games using the cxgames 'file' bottle

=item I<wwine --cxinstalldir ~/cxgames7.0/ -w cxg -b file file.exe>

Runs file.exe in the version of crossover games that is installed at
I<~/cxgames7.0>, using the cxgames 'file' bottle.

--cxinstalldir can be useful to run something in a version of cxgames/cxoffice
other than your primary one. Ie. if a regression causes it to not run in a
later version.

=item I<wwine -w cxg -b file file.exe --wrap ~/bin/startFile>

This causes wwine to create a wrapper shell script at ~/bin/startFile.
When you run that wrapper script, it will cd to the directory
you were in when the script was created, and issue a wwine command
with the above arguments. If you remove/uninstall wwine, the
wrapper script will most likely keep working as it has a fallback
that gets run if wwine cannot be found.

If you are not in the directory that you want wwine to run the file
from, you may use --wrapdir to explicitly specify it.

=item I<wwine -s ~/bin/startFile -w wine>

This causes wwine to run the command specified in ~/bin/startFile
using the parameters specified in ~/bin/startFile, with the exception of
--wine, which would be wine instead of cxgames (here assuming this
is the file created by the above example).

=item I<wwine -w cxg -b file --env -- winetricks --no-isolate vcrun6>

This causes wwine to set the environment variables WINE and WINEPREFIX,
and then execute the command supplied. In this case it would run
winetricks, which would be told to install "vcrun6". Because it is running
under wwine's --env parameter, winetricks will use wwine to perform
the actions, thus allowing you to use winetricks with cxgames.

=item I<wwine -k>

Will make wwine attempt to kill all running wine processes on this system by
sending them the TERM signal.

=item I<wwine -k9>

Will make wwine attempt to kill all running wine processes on this system by
sending them the KILL signal. Should only be used if "wwine -k" fails.

=back

=head1 DEPENDENCIES

Requires at least one of wine, cxoffice, cxgames or cedega.

=head1 ENVIRONMENT VARIABLES

=over

=item B<WWINE_VERBOSE>

If this environment variable is set to the number '1' (ie. WWINE_VERBOSE=1) wwine
will act as if --verbose was supplied. This is useful if you want to view verbose
output from a launch script you created with --wrap.

=item B<WINEDEBUG>

If this is not set, wwine will set it to -all when using -w wine.

=item B<WINEPREFIX>

wwine uses the WINEPREFIX environment variable to add bottle support when
in -w wine mode. If WINEPREFIX is set and a --bottle is supplied, wwine will override
the existing WINEPREFIX. If no bottle is supplied, wwine will respect WINEPREFIX.

=back

Any environment variables that wwine sets while it is running will be output
by wwine when in --verbose mode.

=head1 HELP/SUPPORT

If you need help or support please visit the website at L<http://random.zerodogg.org/wwine>

=head1 BUGS AND LIMITATIONS

If you find a bug, please report it at L<http://random.zerodogg.org/wwine/bugs>. You may
submit feature requests there as well.

=head1 AUTHOR

B<wwine> is written by Eskild Hustvedt <I<code at zerodogg dot org>>

=head1 LICENSE AND COPYRIGHT

Copyright (C) Eskild Hustvedt 2009, 2010, 2011

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
